#+TITLE: Emacs configuration

* Preliminaries

  Lexical scoping for Emacs LISP. Needs to be first thing in the file.

  #+begin_src emacs-lisp
    (setq lexical-binding t)
  #+end_src
  
* Custom settings
  
  Load these from a separate file. 

#+begin_src emacs-lisp
(setq custom-file "~/.emacs.d/custom.el")
(load custom-file)
#+end_src

* Interface and behaviour

Sensible defaults

#+BEGIN_SRC emacs-lisp
  (setq
   inhibit-startup-screen t
   initial-scratch-message nil
   tramp-default-method "ssh")

  (fset 'yes-or-no-p 'y-or-n-p)
  (delete-selection-mode t)   ;; Delete/type over selection
  (put 'downcase-region 'disabled nil)
  (put 'upcase-region 'disabled nil)
#+END_SRC

Always spaces, not tabs!

#+begin_src emacs-lisp
  (setq-default indent-tabs-mode nil)
#+end_src

   Keep auto-generated backup files on one place.

   Reference: http://ergoemacs.org/emacs/emacs_adv_tips.html

#+BEGIN_SRC emacs-lisp
  (setq backup-directory-alist '(("" . "~/.emacs.d/backup-files")))
#+END_SRC

User information
   
#+BEGIN_SRC emacs-lisp
  (setq user-mail-address "mail@karlinglis.net")
#+END_SRC

Unwanted GUI elements

#+begin_src emacs-lisp
  (when (window-system)
    (scroll-bar-mode -1)
    (tool-bar-mode -1))
#+end_src

* Appearence

#+BEGIN_SRC emacs-lisp
  (use-package color-theme-sanityinc-tomorrow
    :ensure t
    :config
    (load-theme 'sanityinc-tomorrow-eighties t))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (set-frame-font "DejaVu Sans Mono Book 14")
#+END_SRC

* Mode line

#+BEGIN_SRC emacs-lisp
  (use-package spaceline-config
    :ensure spaceline
    :config
    (setq powerline-default-separator 'bar)
    (spaceline-toggle-buffer-size-off)
    (spaceline-toggle-projectile-root-on)
    (spaceline-spacemacs-theme))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package diminish :ensure t)
  (use-package delight :ensure t)
#+END_SRC

* Global key bindings

#+begin_src emacs-lisp
  (global-set-key (kbd "<M-up>") 'backward-paragraph)
  (global-set-key (kbd "<M-down>") 'forward-paragraph)
#+end_src

* Secrets

   Keep some stuff out of github.

#+begin_src emacs-lisp
  (load "~/.emacs.secrets")
#+end_src

* Buffers and windows

  Use ibuffer.

#+begin_src emacs-lisp
  (defalias 'list-buffers 'ibuffer)
#+end_src

When using dired in split windows, make the default copy target
the directory shown in the second window.

#+begin_src emacs-lisp
  (setq dired-dwim-target t)
#+end_src

Windmove

#+begin_src emacs-lisp
  (windmove-default-keybindings)
  (setq windmove-wrap-around t)
#+end_src

Buffer move
Reference: http://www.emacswiki.org/cgi-bin/wiki/buffer-move.el

#+begin_src emacs-lisp
  (use-package buffer-move
    :ensure t
    :bind (("<C-S-up>" . buf-move-up)
           ("<C-S-down>" . buf-move-down)
           ("<C-S-left>" . buf-move-left)
           ("<C-S-right>" . buf-move-right)))
#+end_src

Ace window

#+begin_src emacs-lisp
  (use-package ace-window
    :ensure t
    :bind (("M-o" . ace-window)))
#+end_src

* Completion (Ivy)

#+begin_src emacs-lisp
  (use-package ivy
    :ensure t
    :diminish ivy-mode
    :config
    (ivy-mode 1)
    (setq ivy-use-virtual-buffers t
          ivy-count-format "%d/%d "))
#+end_src

* Git (magit)

#+BEGIN_SRC emacs-lisp
  (use-package magit
    :ensure t
    :bind ("<f8>" . magit-status))
#+END_SRC

* Editing

** editorconfig

 #+BEGIN_SRC emacs-lisp
   (use-package editorconfig
     :ensure t
     :diminish editorconfig-mode
     :config
     (editorconfig-mode 1))
 #+END_SRC

** paredit

#+BEGIN_SRC emacs-lisp
  (use-package paredit :ensure t)
#+END_SRC

** subword-mode

#+begin_src emacs-lisp
  (use-package subword
    :diminish subword-mode
    :config (global-subword-mode))
#+end_src

* Grep

#+BEGIN_SRC emacs-lisp
  (use-package ripgrep :ensure t)
#+END_SRC

* Projectile
   
#+begin_src emacs-lisp
  (use-package projectile
    :ensure t
    :bind-keymap
    ("C-x p" . projectile-command-map)
    :config
    (projectile-global-mode)
    (setq projectile-completion-system 'ivy)
    (setq projectile-switch-project-action 'projectile-dired))
#+end_src

* Language server

#+begin_src emacs-lisp
  (use-package eglot
    :ensure t
    :hook
    (rust-mode . eglot-ensure)
    :custom
    (rust-indent-where-clause t)
    :config
    (if (executable-find "rust-analyzer-x86_64-unknown-linux-gnu")
        (add-to-list 'eglot-server-programs '(rust-mode "rust-analyzer-x86_64-unknown-linux-gnu"))
      (message "Could not find `rust-analyzer'")))
#+end_src

#+begin_src emacs-lisp
  (use-package eldoc :diminish eldoc-mode)
#+end_src

LSP mode seems to work better with omnisharp, so we'll try both.

#+begin_src emacs-lisp
  (use-package lsp-mode
    :hook ((csharp-mode . lsp))
    :commands (lsp)
    :custom
    (lsp-keymap-prefix "C-c C-l")
    (lsp-completion-enable t)
    (lsp-enable-snippet nil)
    (lsp-eldoc-render-all nil))
#+end_src

* Code completion

#+begin_src emacs-lisp
  (use-package auto-complete
    :ensure t
    :config
    (ac-config-default)
    (setq ac-ignore-case nil)
    (setq ac-use-menu-map t)
    :bind (:map
           ac-completing-map
           ("<C-n>" . ac-next)
           ("<C-p>" . ac-previous)))
#+end_src

#+begin_src emacs-lisp
  (use-package company
    :ensure t
    :diminish company-mode
    :bind (:map company-active-map
                (("C-n" . company-select-next)
                 ("C-p" . company-select-previous)
                 ("<tab>" . company-complete-selection)
                 ("TAB" . company-complete-selection)))
    :custom
    (company-idle-delay 0)
    (company-minimum-prefix-length 3)
    (company-selection-wrap-around t))
#+end_src

* Flycheck

#+begin_src emacs-lisp
  (require 'flycheck)

  (defun ki/enable-flycheck-for-mode ()
    "Add to mode hooks to set flycheck-mode t."
    (flycheck-mode t))
#+end_src

* Languages

** CSS/SCSS

#+begin_src emacs-lisp
  (use-package css-mode
    :mode ("\\.css\\'" "\\.scss\\'" "\\.sass\\'")
    :hook ((css-mode-hook . ki/enable-flycheck-for-mode)))

  (use-package rainbow-mode
    :ensure t
    :diminish rainbow-mode
    :hook ((css-mode-hook . rainbow-mode)
           (css-mode-hook . company-mode)))
#+end_src

** HTML etc. (web mode)

#+BEGIN_SRC emacs-lisp
  (use-package web-mode
    :ensure t
    :mode ("\\.html\\'"
           "\\.svg\\'"
           "\\.php\\'")
    :config
    (setq web-mode-enable-css-colorization t
          web-mode-enable-comment-keywords t
          web-mode-enable-current-element-highlight t
          web-mode-enable-current-column-highlight t)
    (add-to-list 'web-mode-indentation-params '("lineup-calls" . nil))
    (electric-pair-mode t))
#+END_SRC

** Javascript

#+begin_src emacs-lisp
  ;; Stop flycheck using jshint
  (setq-default flycheck-disabled-checkers
                (append flycheck-disabled-checkers
                        '(javascript-jshint)))

  ;; Use js2-mode on .js files
  (add-to-list 'auto-mode-alist '("\\.js\\'" . js2-mode))
  (add-to-list 'auto-mode-alist '("\\.mjs\\'" . js2-mode))

  ;; Detect jsx usage in react files
  (add-to-list 'magic-mode-alist '("import.*react" . rjsx-mode))

  (defun ki/js2-mode-setup ()
    "Set options for js2-mode."
    (setq-default js2-global-externs '("module" "require"))
    (setq-default js2-basic-offset 2)
    (setq-default js2-mode-show-parse-errors nil)  ; Leave to flycheck
    ;; Use flycheck and eslint
    (flycheck-mode t)
    (when (executable-find "eslint")
      (flycheck-select-checker 'javascript-eslint))
    (js2r-add-keybindings-with-prefix "C-c C-m"))

  (add-hook 'js2-mode-hook 'ki/js2-mode-setup)

  ;; Web mode

  (defun ki/web-mode-setup ()
    "Set options for web-mode."
    (electric-pair-mode t)
    (setq web-mode-enable-css-colorization t)
    (setq web-mode-enable-comment-keywords t)
    (setq web-mode-enable-current-element-highlight t)
    (setq web-mode-enable-current-column-highlight t)
    ;; (setq web-mode-attr-indent-offset 4)
    (add-to-list 'web-mode-indentation-params '("lineup-calls" . nil)))

  ;; eslint can check .jsx syntax - use this in web-mode
  (flycheck-add-mode 'javascript-eslint 'web-mode)
#+end_src

** TypeScript

#+BEGIN_SRC emacs-lisp
  (use-package typescript-mode
    :ensure t
    :hook ((typescript-mode . company-mode))
    :config 
    (electric-pair-mode t))

  (defun ki/tide-mode-setup ()
    (tide-setup)
    (flycheck-mode +1)
    (setq flycheck-check-syntax-automatically '(save mode-enabled idle-change))
    (eldoc-mode +1))

  (use-package tide
    :ensure t
    :after (typescript-mode company)
    :custom (tide-sync-request-timeout 5)
    :bind (:map typescript-mode-map
                ("C-c C-t r" . tide-rename-symbol)
                ("C-c C-t f" . tide-rename-file)
                ("C-c C-t s" . tide-restart-server)
                ("C-c C-t R" . tide-references))
    :hook ((typescript-mode . ki/tide-mode-setup)
           (typescript-mode . tide-hl-identifier-mode)))
#+END_SRC

** Scheme

#+begin_src emacs-lisp
  (setq geiser-default-implementation 'guile)
  (setq geiser-active-implementations '(guile))
  (add-hook 'scheme-mode-hook 'enable-paredit-mode)
  (add-hook 'geiser-repl-mode-hook 'enable-paredit-mode)
#+end_src

** Emacs lisp
   
#+BEGIN_SRC emacs-lisp
  (use-package emacs-lisp-mode
    :hook ((emacs-lisp-mode . paredit-mode)
           (emacs-lisp-mode . company-mode)))
#+END_SRC

** Python
   
#+begin_src emacs-lisp
  (setq python-shell-interpreter "python3")
  ;; Use jedi for autocomplete sources
  ;; (require 'jedi)
  ;; (add-to-list 'ac-sources 'ac-source-jedi-direct)
  ;; (add-hook 'python-mode-hook 'jedi:setup)
#+end_src

** WebGL

#+begin_src emacs-lisp
  (add-to-list 'auto-mode-alist '("\\.shader\\'" . glsl-mode))
#+end_src

** Maxima

#+begin_src emacs-lisp
  (add-to-list 'load-path "/usr/share/maxima/5.32.1/emacs")
  (autoload 'maxima-mode "maxima" "Maxima mode" t)
  (autoload 'imaxima "imaxima" "Front-end for maxima with image support" t)
  (autoload 'maxima "maxima" "Maxima interaction" t)
  ;; (autoload 'imath-mode "imath-mode" "Imath mode for maths formula input" t)
  (setq imaxima-use-maxima-mode-flag t)
  (add-to-list 'auto-mode-alist '("\\.ma[cx]" . maxima-mode))
#+end_src

** Rust

#+begin_src emacs-lisp
  (use-package rust-mode
    :ensure t
    :mode ("\\.rs\\'" . rust-mode)
    :config
    (electric-pair-mode t))

  (use-package cargo
    :ensure t
    :diminish cargo-minor-mode
    :hook (rust-mode . cargo-minor-mode))
#+end_src

** TOML

#+begin_src emacs-lisp
  (use-package toml-mode
    :ensure t
    :mode ("\\.toml\\'" . toml-mode))
#+end_src

** F#

#+begin_src emacs-lisp
  (use-package fsharp-mode
    :mode ("\\.fs\\'" . fsharp-mode))
#+end_src

** PHP

#+begin_src emacs-lisp
  (use-package php-mode
    :mode ("\\.php\\'" . php-mode)
    :config
    (electric-pair-mode t))
#+end_src

** Markdown

Requires:

#+begin_src sh :tangle no
  sudo apt install markdown
#+end_src

#+begin_src emacs-lisp
  (use-package markdown-mode
    :mode ("\\.md\\'" . markdown-mode)
    :custom (markdown-command "markdown"))
#+end_src

** C#

#+begin_src emacs-lisp
  ;; (use-package csharp-mode
  ;;   :config
  ;;   (electric-pair-mode t))
#+end_src

** PowerShell

#+begin_src emacs-lisp
  (use-package powershell :ensure t)
#+end_src

** SQL

#+begin_src emacs-lisp
  (use-package sql-indent
    :ensure t
    :diminish sqlind-minor-mode
    :hook (sql-mode . sqlind-minor-mode)
    :config
    (setq sqlind-basic-offset 4))
#+end_src

#+begin_src emacs-lisp
  (use-package sqlup-mode
    :ensure t
    :diminish sqlup-mode
    :hook (sql-mode . sqlup-mode)
    :config
    (add-to-list 'sqlup-blacklist "name"))
#+end_src

** YAML
   
#+begin_src emacs-lisp
  (use-package yaml-mode
    :ensure t
    :mode ("\\.yaml\\'" "\\.yml\\'"))
#+end_src



* Copilot



* Ispell

#+begin_src emacs-lisp
  (defun ki/ispell-region-or-buffer (r-beg r-end)
    "Call ispell-region or ispell-buffer depending on whether mark is set."
    (interactive "r")
    (if (and transient-mark-mode mark-active)
        (ispell-region r-beg r-end)
      (ispell-buffer)))

  (use-package ispell
    :bind ("<f7>" . ki/ispell-region-or-buffer))
#+end_src

* Org

#+begin_src emacs-lisp
  (require 'org)

  (setq org-directory "~/org")


  ;; Keybindings
  (global-set-key (kbd "C-c l") 'org-store-link)
  (global-set-key (kbd "C-c c") 'org-capture)
  (global-set-key (kbd "C-c a") 'org-agenda)
  (global-set-key (kbd "C-c b") 'org-iswitchb)
  (global-set-key (kbd "<f11>") 'org-clock-goto)
  ; (global-set-key (kbd "C-<f11>") 'org-clock-in)
  (global-set-key (kbd "<f12>") 'org-agenda)

  (defun ki/org-local-keys ()
    "Local keybindings for use in Org mode."
    (local-set-key (kbd "C-c d") 'org-decrypt-entry))

  (add-hook 'org-mode-hook 'ki/org-local-keys)

  (defun ki/org-agenda-local-keys ()
    "Local keybindings for use in Org Agenda mode."
    (local-set-key (kbd "C-c s") 'ki/org-git-checkpoint))

  (add-hook 'org-agenda-mode-hook 'ki/org-agenda-local-keys)


  ;; Headline ID links
  (add-to-list 'org-modules 'org-id)
  (setq org-id-link-to-org-use-id 'create-if-interactive-and-no-custom-id)


  ;; Org crypt
  (require 'org-crypt)
  (add-to-list 'org-modules 'org-crypt)

  ; Encrypt entries before saving.
  (org-crypt-use-before-save-magic)

  ; Set tag for encrypted headings.
  (setq org-crypt-tag-matcher "CRYPT")
  (setq org-tags-exclude-from-inheritance (quote ("CRYPT")))


  ; Prevent org-crypt from disabling auto-save.
  (setq org-crypt-disable-auto-save nil)


  ;; Wrapping and lines
  (setq org-cycle-separator-lines 0)
  (setq org-startup-truncated nil)

  (defun ki/org-wrapping ()
    "Set text wrapping for Org mode."
    (visual-line-mode 1))

  (add-hook 'org-mode-hook 'ki/org-wrapping)

  ; Override these settings for the agenda
  ; Reference: http://superuser.com/questions/530363/emacs-org-mode-how-to-disable-visual-line-wrap-for-agenda-buffers-only
  (defun ki/org-agenda-wrapping ()
    "Set text wrapping for Org mode agenda."
    (visual-line-mode -1)
    (toggle-truncate-lines 1))

  (add-hook 'org-agenda-mode-hook 'ki/org-agenda-wrapping)


  ;; Save clock history accross emacs sessions.
  (setq org-clock-persist 'history)
  (org-clock-persistence-insinuate)


  ;; Logging
  (setq org-log-done (quote time))
  (setq org-log-into-drawer t)
  (setq org-clock-into-drawer t)
  (setq org-log-state-notes-insert-after-drawers nil)


  ;; Show more tasks in clock history
  (setq org-clock-history-length 24)


  ;; TODO keywords
  (setq org-todo-keywords
        (quote ((sequence "TODO(t)" "|" "DONE(d)")
                (sequence "WAITING(w@/!)" "SOMEDAY(s)" "|" "CANCELLED(c@/!)"))))

  ;; (setq org-todo-keyword-faces
  ;;       (quote (("WAITING" :foreground "orange" :weight "bold")
  ;;            ("CANCELLED" :foreground "forest green" :weight "bold"))))


  ;; Default column view
  (setq org-columns-default-format "%25ITEM(Task) %TODO %TAGS")


  ;; Images
  (setq org-startup-with-inline-images nil)
  (setq org-image-actual-width 600)

  ;; Agenda settings
  (setq org-agenda-files
        (quote ("~/org"
                "~/org/projects")))

  (setq org-agenda-span 'day)

  ; Habits
  (require 'org-habit)
  (add-to-list 'org-modules 'org-habit)

  ; Make agenda buffer use a full window
  (setq org-agenda-window-setup 'current-window)

  ; Allow tag searches to ignore scheduled and deadlined tasks
  (setq org-agenda-tags-todo-honor-ignore-options t)

  ; Custom adgenda commands
  (setq org-agenda-custom-commands
        (quote (("n" "Notes" tags "NOTE"
                 ((org-agenda-overriding-header "Notes")))
                ("h" "Habits" tags-todo "STYLE=\"habit\""
                 ((org-agenda-overriding-header "Habits")))
                ("o" "Someday" todo "SOMEDAY"
                 ((org-agenda-overriding-header "Someday...")))
                ("r" "Tasks to refile" tags "REFILE"
                 ((org-agenda-overriding-header "Tasks to refile")))
                ("R" "Tasks eligible for archiving" tags "CLOSED<=\"<-90d>\"-NOARCHIVE"
                 ((org-agenda-overriding-header "Tasks eligible for archiving (closed over 90 days ago)")))
                ("j" . "Jujitsu syllabus") ; description for "j" prefix. 
                ("jt" "Current techniques" tags-todo "+jujitsu+SYLLABUS/!+NEW"
                 ((org-agenda-overriding-header "Jujitsu syllabus - current techniques")))
                ("js" "Future techniques" tags "+jujitsu+SYLLABUS"
                 ((org-agenda-overriding-header "Jujitsu syllabus - future techniques")))
                ("p" "Passwords" tags "PASSWD"
                 ((org-agenda-overriding-header "Passwords")))
                (" " "Agenda" 
                 ((agenda "" nil)
                  (tags "REFILE"
                        ((org-agenda-overriding-header "Tasks/notes to refile")))
                  (tags-todo "-SYLLABUS/!-WAITING-SOMEDAY"
                             ((org-agenda-overriding-header "Tasks")
                              (org-agenda-todo-ignore-scheduled 'all)
                              (org-agenda-todo-ignore-deadlines 'near)))
                  (tags-todo "-SYLLABUS/!+WAITING-SOMEDAY"
                             ((org-agenda-overriding-header "Waiting and postponed tasks")
                              (org-agenda-todo-ignore-scheduled 'future)))
                 nil)))))


  ;; Capture settings
  (setq org-default-notes-file (concat org-directory "/capture.org"))

  (setq org-capture-templates
        (quote (("n" "Note" entry (file "~/org/capture.org")
                 "* %? :NOTE:\n %U\n %a")
                ("t" "Task" entry (file "~/org/capture.org")
                 "* TODO %?\n %U\n %a\n")
                ("l" "Note with web link" entry (file "~/org/capture.org")
                 "* %? :NOTE:\n %U\n %x")
                ("m" "Meeting" entry (file "~/org/capture.org")
                 "* %? :MEETING:\n %U\n" :clock-in t :clock-out t)
                ("j" "Journal" entry (file+datetree "~/org/journal.org")
                 "* %U\n %?")
                ("h" "Habit" entry (file "~/org/capture.org")
                 "* TODO %?\n%U\nSCHEDULED: %(format-time-string \"<%Y-%m-%d %a .+1d/3d>\")\n:PROPERTIES:\n:STYLE: habit\n:END:")
                ("p" "Password" entry (file "~/org/capture.org")
                 "* %? :PASSWD:CRYPT:\n %U\n\n user: \n pass: ")
                ("w" "Weight reading" table-line (file+headline "~/org/personal.org" "Weight")
                 "| %u |   %? |")
                ("6" "6Music now playing" entry (file "~/org/capture.org")
                 "* %(ki/bbc-radio-nowplaying \"http://polling.bbc.co.uk/radio/nowandnextservice/bbc_6music.jsonp\") :NOTE:music:\n %U\n %?"))))


  ;; Refile settings
  ; Targets include this file and any file contributing to the agenda - up to 9 levels deep
  (setq org-refile-targets (quote ((nil . (:maxlevel . 9))
                                   (org-agenda-files . (:maxlevel . 9)))))

  ; Use full outline paths for refile targets
  (setq org-refile-use-outline-path t)

  ; Allow refile to create parent tasks with confirmation
  (setq org-refile-allow-creating-parent-nodes (quote confirm))


  ;; Archive settings
  (setq org-archive-location "%s_archive::* Archived Tasks")
  ; Don't loose TODO state
  (setq org-archive-mark-done nil)


  ;; Export settings
  (require 'ox-gfm)
  (setq org-export-allow-bind-keywords t)
  (setq org-html-validation-link nil)
  (setq org-html-postamble t)
  (setq org-html-postamble-format 
        (quote (("en" "<p class=\"author\">Author: %a (%e)</p>
  <p class=\"date\">Created: %T</p>
  <p class=\"creator\">%c</p>"))))
  ; Images not links
  (setq org-html-inline-images t)
  ; Basic styles to improve readability.
  (setq org-html-head "<link rel=\"stylesheet\" href=\"css/org-style.css\" type=\"text/css\" />
  <meta name=\"viewport\" content=\"width=device-width\" />")
  ;; (setq org-html-head-extra "<meta name=\"viewport\" content=\"width=device-width\" />")

  (setq org-publish-project-alist
        (quote (("org-org"
                 :base-directory "~/org"
                 :publishing-directory "~/Dropbox/org-publish"
                 :publishing-function org-html-publish-to-html)
                ("org-static"
                 :base-directory "~/org"
                 :recursive t
                 :base-extension "js\\|css\\|png\\|jpg\\|pdf"
                 :publishing-directory "~/Dropbox/org-publish"
                 :publishing-function org-publish-attachment)
                ("org"
                 :components ("org-org"
                              "org-static")))))

  (defun ki/org-html-format-drawer-function (name contents)
    "Override drawer formatting for HTML export."
    (concat "<div class=\"drawer drawer-" (downcase name) "\">\n"
            contents
            "\n</div>"))

  (setq org-html-format-drawer-function 'ki/org-html-format-drawer-function)


  ;; Org babel
  (org-babel-do-load-languages
   (quote org-babel-load-languages)
   (quote ((emacs-lisp . t)
           (shell . t)
           (ditaa . t)
           (dot . t) ; Graphviz
           (python . t)
           (js . t)
           (scheme . t)
           (css . t)
           (gnuplot . t)
           (maxima . t)
           (sqlite . t)
           (plantuml . t)
           (latex . t))))

  (setq org-babel-python-command "python3")

  ;; Link types
  ;; (defun ki/org-custom-link-pic-follow (path)
  ;;   (org-open-file-with-emacs
  ;;    (concat picture-directory "/" path)))

  ;; (org-add-link-type "pic" 'ki/org-custom-link-pic-follow)

  ;; (setq org-link-abbrev-alist
  ;;       (quote (("pic" . "~/Pictures/"))))

  ;; LaTeX fragments
  (setq org-format-latex-options
        (plist-put org-format-latex-options :scale 1.5))
  (setq org-latex-packages-alist
        (quote (("" "esdiff" t)
                ("" "mathpartir" t)
                ("" "krimaths" t) ; Custom definitions
                )))

  ;; Ditaa
  (setq org-ditaa-jar-path "/usr/bin/ditaa")

  ;; PlantUML
  (setq plantuml-jar-path "/usr/bin/plantuml")
  (setq org-plantuml-jar-path "/usr/share/plantuml/plantuml.jar")

  ;; LaTeX maths in ODT export
  (require 'ox-odt)
  (setq org-latex-to-mathml-convert-command
        "latexmlmath \"%i\" --presentationmathml=%o")
  ;; (setq org-latex-to-mathml-convert-command
  ;;       "java -jar %j -unicode -force -df %o %I"
  ;;       org-latex-to-mathml-jar-file
  ;;       "~/opt/mathtoweb/mathtoweb.jar")

  ;; Additional pretty entities
  (add-to-list 'org-entities-user
               '("supseteq" "\\supseteq" t "&supe;"
                 "[superset of or equal to]"
                 "[superset of or equal to]" "⊇"))
  (add-to-list 'org-entities-user
               '("subseteq" "\\subseteq" t "&sube;"
                 "[subset of or equal to]"
                 "[subset of or equal to]" "⊆"))
  (add-to-list 'org-entities-user
               '("vdash" "\\vdash" t "&#8866;"
                 "[right tack]"
                 "[right tack]" "⊢"))


  ;; Compatibility with windmove in org-mode:
  (add-hook 'org-shiftup-final-hook 'windmove-up)
  (add-hook 'org-shiftleft-final-hook 'windmove-left)
  (add-hook 'org-shiftdown-final-hook 'windmove-down)
  (add-hook 'org-shiftright-final-hook 'windmove-right)

  ;; Compatibility with ispell
  (defun ki/org-ispell ()
    "Configure 'ispell-skip-region-alist' for org-mode."
    (make-local-variable 'ispell-skip-region-alist)
    (add-to-list 'ispell-skip-region-alist '(org-property-drawer-re))
    (add-to-list 'ispell-skip-region-alist '("~" "~"))
    (add-to-list 'ispell-skip-region-alist '("=" "="))
    (add-to-list 'ispell-skip-region-alist '("^[[:space:]]*#\\+BEGIN_SRC" . "^[[:space:]]*#\\+END_SRC")))

  (add-hook 'org-mode-hook 'ki/org-ispell)

  ;; Org git checkpoint
  (defun ki/org-git-checkpoint ()
    "Save all Org mode buffers and run org-cp script."
    (interactive)
    (org-save-all-org-buffers)
    (shell-command "org-cp"))
#+end_src

#+begin_src emacs-lisp
(eval-after-load "org-present"
  '(progn
     (add-hook 'org-present-mode-hook
               (lambda ()
                 (org-present-big)
                 (org-display-inline-images)
                 (org-present-hide-cursor)
                 (org-present-read-only)))
     (add-hook 'org-present-mode-quit-hook
               (lambda ()
                 (org-present-small)
                 (org-remove-inline-images)
                 (org-present-show-cursor)
                 (org-present-read-write)))))
#+end_src

* Lorem ipsum text

#+begin_src emacs-lisp
  (autoload 'Lorem-ipsum-insert-paragraphs "lorem-ipsum" "" t)
  (autoload 'Lorem-ipsum-insert-sentences "lorem-ipsum" "" t)
  (autoload 'Lorem-ipsum-insert-list "lorem-ipsum" "" t)
#+end_src

* LaTeX

These packages are needed for current setup.

#+BEGIN_SRC sh :tangle no
sudo apt install texlive texlive-xetex textlive-science texlive-pstricks
#+END_SRC
   
Use xelatex to compile LaTeX files to PDF.
   
Reference: https://lists.gnu.org/archive/html/help-gnu-emacs/2013-01/msg00248.html

#+begin_src emacs-lisp
  (eval-after-load 'tex-mode
    '(add-to-list 'tex-compile-commands
                  '((concat "xelatex "
                            (if (< 0 (length tex-start-commands))
                                (shell-quote-argument tex-start-commands))
                            " %f")
                    t "%r.pdf")))
#+end_src

* Skeletons

#+begin_src emacs-lisp
  (require 's)
#+end_src

** Web
#+begin_src emacs-lisp
  (define-skeleton skel-html5-doc
    "Insert skeleton HTML5 document, querying for title."
    "Title: "
    "<!DOCTYPE html>\n"
    "<html lang=\"en-UK\">\n"
    "<head>\n"
    > "<meta charset=\"utf-8\" />\n"
    > "<title>" str "</title>\n"
    "</head>\n"
    "<body>\n"
    > _"\n"
    "</body>\n"
    "</html>")
#+end_src

** Org
#+begin_src emacs-lisp
  (define-skeleton skel-org-food-recipie
    "Insert necessary headings for recipie entry, querying for title."
    "Title: " 
    "** " str "\n"
    > ":PROPERTIES:\n"
    > ":source:    \n"
    > ":serves:    \n"
    > ":status:    \n"
    > ":END:\n\n"
    "*** Ingredients\n\n"
    > _"\n\n"
    "*** Equipment\n\n"
    "*** Method\n\n")
#+end_src

#+begin_src emacs-lisp
  (define-skeleton skel-org-feed
    "Insert feedpage entry, querying for title and URL."
    nil
    "*** " (setq title (skeleton-read "Feed title: ")) "\n"
    ":FEEDURL:\n"
    (setq url (skeleton-read "Feed URL: ")) "\n"
    ":END:\n\n")
#+end_src

#+begin_src emacs-lisp
  (define-skeleton skel-org-block-ditaa
    "Insert an org ditaa block, querying for filename."
    "File (no extension): "
    "#+BEGIN_SRC ditaa :file " str ".png :cmdline -E -S\n"
    > _ - \n
    "#+END_SRC\n")
#+end_src

#+begin_src emacs-lisp
  (define-skeleton skel-org-block-gnuplot
    "Insert an org gnuplot block, querying for filename."
    "File (no extension): "
    "#+BEGIN_SRC gnuplot :file " str ".png\n"
    > "reset" \n
    > "set terminal png size 600,400" \n
    > _ - \n
    "#+END_SRC\n")
#+end_src

#+begin_src emacs-lisp
  (define-skeleton skel-org-block-graphviz-dot
    "Insert an org graphviz dot block, querying for filename."
    "File (no extension): "
    "#+BEGIN_SRC dot :file " str ".png" \n
    > "digraph G {" \n
    > > _ - \n
    > "}" \n
    "#+END_SRC" \n)
#+end_src

#+begin_src emacs-lisp
  (define-skeleton skel-org-block-maxima-latex
    "Insert an org maxima block set up for inline latex display."
    nil
    "#+BEGIN_SRC maxima :exports none :results raw\n"
    > "tex(" _ ")" \n
    "#+END_SRC\n")
#+end_src

** LaTeX

#+begin_src emacs-lisp
  (define-skeleton skel-latex-split-equation-block
    "Inset LaTeX equation* split block while in org mode."
    nil
    "\\begin{equation*}" \n
    "\\begin{split}" \n
    > _ \n
    "\\end{split}" \n
    "\\end{equation*}" \n)
#+end_src

#+begin_src emacs-lisp
  (define-skeleton skel-latex-tma
    "Template for LaTeX TMAs, prompting for date and title."
    nil
    "\\documentclass{article}" \n
    "\\usepackage{amsmath}" \n
    "\\usepackage{amssymb}" \n
    "\\usepackage{siunitx}" \n
    "\\usepackage{array} % For advanced column specification in tabular" \n
    "\\usepackage{blkarray} % For labelled matrices" \n
    "\\usepackage{commath} % For \\abs" \n
    "\\usepackage{graphicx}" \n
    "\\usepackage{fancyhdr}" \n
    "\\usepackage{pdftricks2}" \n
    "\\usepackage{esdiff}" \n
    "\\usepackage{polynom}" \n \n
    "\\usepackage{krimaths}" \n \n
    "\\newcommand\\addtag{\\refstepcounter{equation}\\tag{\\theequation}}" \n \n
    "\\pagestyle{fancy}" \n
    "\\lfoot{Karl Inglis - D1289717}" \n
    "\\cfoot{}" \n
    "\\rfoot{\\thepage}" \n \n
    "\\renewcommand{\\headrulewidth}{0pt}" \n
    "\\renewcommand{\\footrulewidth}{0.4pt}" \n \n
    "\\author{Karl Inglis - D1289717}" \n
    "\\date{" (setq date (skeleton-read "Date (YYYY-MM-DD): ")) "}" \n \n
    "\\title{" (setq title (skeleton-read "Title (M TMA N): ")) "}" \n \n
    "\\begin{document}" \n \n
    "\\maketitle" \n \n
    "\\section*{1.}" \n \n
    _ \n \n
    "\\end{document}")
#+end_src

* Functions

#+begin_src emacs-lisp
  (defun dot-emacs ()
    "Opens .emacs (init.el) file for customisation."
    (interactive)
    (find-file "~/.emacs.d/init.el"))
#+end_src

** Text transform

#+begin_src emacs-lisp
(defvar title-case-exclude '("at" "or" "but" "by" "for" "from" "in" "into" 
				   "like" "near" "of" "off" "on" "onto" "out" 
				   "over" "to" "up" "upon" "with" "nor" "so" 
				   "yet" "the" "if" "and")
  "List of words not to capitalize when in titles.")


(defun in-list-p (object list)
  "Returns t if supplied object is equal to one or more values in the given list."
  (if (equal object (car list))
      t
    (if (not (equal nil (cdr list)))
	(in-list-p object (cdr list))
      nil)))


(defun title-case-region (r-beg r-end)
  "Capitalize important words in the selected region, like a title."
  (interactive "r")
  (let (word 
	(count 0)) ; keep track of number of words
    (save-excursion
      (save-restriction
	(narrow-to-region r-beg r-end)
	;; Make everything lowercase, or matching won't work:
	(downcase-region r-beg r-end)
	(goto-char (point-min))
	;; Isolate words, work on one at a time:
	(while (re-search-forward "\\w\\{2,\\}" nil t)
	  (setq word (match-string 0)) 
	  (delete-region (match-beginning 0) (match-end 0))
	  ;; Capitalize word only if it's the first, or if it's not in the list:
	  (if (or (zerop count)
		  (not (in-list-p word title-case-exclude)))
	      (insert (capitalize word))
	    (insert word))
	  (setq count (1+ count)))))))


(defun title-case-string (t-str)
  "Capitalize important words in string, like a title."
  (with-temp-buffer
    (goto-char (point-min))
    (insert t-str)
    (title-case-region (point-min) (point-max))
    (buffer-string)))


(defun format-as-identifier (ws-str &optional separator rep-regexp)
  "Replace whitespace and punctuation in the given string with a separator."
  (interactive)
  ;; set default values if no optinal arguments given
  (if (not rep-regexp)
      (setq rep-regexp "[^A-Za-z0-9-]+"))
  (if (not separator) 
      (setq separator "-"))
  ;; trim ends
  (setq ws-str (replace-regexp-in-string "^[^A-Za-z0-9]+" "" ws-str))
  (setq ws-str (replace-regexp-in-string "[^A-Za-z0-9]+$" "" ws-str))
  ;; replace unwanted characters
  (setq ws-str (replace-regexp-in-string rep-regexp separator ws-str))
  ;; return string with no caps
  (downcase ws-str))
#+end_src

** Word counting functions

    Based on count-words-region from: 
http://www.gnu.org/software/emacs/emacs-lisp-intro/html_node/Whitespace-Bug.html#Whitespace-Bug

#+begin_src emacs-lisp
(defun count-words (beginning end)
  "Returns the number of words in the region.
Use count-words-region to call interactively."
  (save-excursion
    (let ((count 0))
      (goto-char beginning)
      (while (and (< (point) end)
		  (re-search-forward "\\w+\\W*" end t))
	(setq count (1+ count)))
      count)))
    

(defun count-words-region (beginning end)
  "Print number of words in the region."
  (interactive "r")
  (message "Counting words in region ... ")
  (save-excursion
    (let (count)
      ;; get the word count:
      (setq count (count-words beginning end))
      ;; print in message:
      (cond ((zerop count)
	     (message "The region does NOT have any words."))
	    ((= 1 count)
	     (message "The region has 1 word."))
	    (t
	     (message "The region has %d words." count))))))


(defun count-words-xml (beginning end)
  "Returns the number of words in region, excluding XML tags.
Use count-words-region-xml to call interactively."
  (let ((oldbuf (current-buffer)))
    (with-temp-buffer
      (insert-buffer-substring oldbuf beginning end)
      (goto-char (point-min))
      ;; remove all tags:
      (while (re-search-forward "</?[^\0]*?>" nil t)
	(replace-match "" nil nil))
      ;; count what remains:
      (count-words (point-min) (point-max)))))


(defun count-words-region-xml (beginning end)
  "Print number of words in region, excluding XML tags."
  (interactive "r")
  (save-excursion
    (let (count)
      ;; get the word count:
      (setq count (count-words-xml beginning end))
      ;; print in message:
      (cond ((zerop count)
	     (message "The region does NOT have any words."))
	    ((= 1 count)
	     (message "The region has 1 word, excluding XML tags."))
	    (t
	     (message "The region has %d words, excluding XML tags." count))))))
#+end_src
